name: Deploy Dev Server to AWS Elastic Beanstalk

on:
  push:
    branches:
      - dev
jobs:
  #  buildAndTest:
  #    name: CI Pipeline
  #    runs-on: ubuntu-latest
  #    strategy:
  #      # Node version은 20 버전을 이용한다.
  #      matrix:
  #        node-version: [ '20.x' ]
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #
  #      # Initialize Node.js
  #      - name: Install Node.js ${{ matrix.node-version }}
  #        uses: actions/setup-node@v4
  #        with:
  #          node-version: ${{ matrix.node-version }}
  #      - run: sudo npm install -g yarn typescript
  #
  #      - name: Install Nest Cli
  #        run: yarn global add @nestjs/cli
  #
  #      # Install project dependencies, test and build
  #      - name: Install dependencies
  #        run: yarn install
  #
  #      #      - name: Prepare .env file
  #      #        uses: nohmad/aws-ssm-parameter-store-action@master
  #      #        with:
  #      #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #      #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #      #          aws-region: ap-northeast-2
  #      #          path: ${{ secrets.DEV_PARAMETER_STORE_PATH }}
  #      #          format: dotenv
  #      #          filename: .env
  #
  #      - name: Run build
  #        run: yarn build

  deploy:
    name: CD Pipeline
    runs-on: ubuntu-latest

    env:
      NODE_OPTIONS: "--max_old_space_size=4096"

    strategy:
      matrix:
        node-version: [ '20.x' ]
    # 위의 buildAndTest가 실행되고 진행된다.
    #    needs: buildAndTest
    steps:
      - uses: actions/checkout@v4
          # env 파일을 이용할 일이 보통 많은데,
          # Github Secrets를 이용하여 env 파일을 만들고 추가한다.
        # 참고로 ElasticBeanstalk에 Node 관련을 배포할 때는,
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: sudo npm install -g yarn typescript

      - name: Install Nest Cli
        run: yarn global add @nestjs/cli


      - name: Installing module
        run: yarn install

      - name: Prepare .env file
        uses: nohmad/aws-ssm-parameter-store-action@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          path: ${{ secrets.DEV_SSM_PATH }}
          format: dotenv
          filename: .env

      - name: Run build
        run: yarn build

      - name: nodecommand
        run: cp config/Procfile Procfile
      # Install AWS CLI 2
      - name: Install AWS CLI 2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          which aws
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Make ZIP file with source code
      # -x는 zip파일 생성 시에 해당 부분들을 제외한다.
      - name: Generate deployment package
        #        run: zip -r deploy.zip . -x '*.git*' './src/*' './aws/*' awscliv2.zip
        run: zip -r deploy.zip . -x '*.git*' './src/*' './aws/*' './node_modules' './**/node_modules' awscliv2.zip

      # Get Current Time
      - name: Get Current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD-HH-mm-ss
          utcOffset: '+09:00'

      # Deploy to Elastic Beanstalk
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: mufin-server
          environment_name: Mufin-server-development-env
          bucket_name: elasticbeanstalk-ap-northeast-2-329599642463
          region: ${{ secrets.AWS_REGION }}
          version_label: ${{github.SHA}}-${{ steps.current-time.outputs.formattedTime }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 300