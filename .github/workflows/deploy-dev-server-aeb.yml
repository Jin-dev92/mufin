name: Deploy Dev Server to AWS Elastic Beanstalk

on:
  push:
    branches:
      - dev
jobs:
  buildAndTest:
    name: CI Pipeline
    runs-on: ubuntu-latest
    strategy:
      # Node version은 20 버전을 이용한다.
      matrix:
        node-version: [ '20.x' ]

    steps:
      - uses: actions/checkout@v3

      # Initialize Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: sudo npm install -g yarn typescript

      # Install project dependencies, test and build
      - name: Install dependencies
        run: yarn install
      - name: Run build
        run: npm run build

  deploy:
    name: CD Pipeline
    runs-on: ubuntu-latest

    env:
      NODE_OPTIONS: "--max_old_space_size=4096"

    strategy:
      matrix:
        node-version: [ '20.x' ]
    # 위의 buildAndTest가 실행되고 진행된다.
    needs: buildAndTest
    steps:
      - uses: actions/checkout@v3
      # env 파일을 이용할 일이 보통 많은데,
      # Github Secrets를 이용하여 env 파일을 만들고 추가한다.
      # 참고로 ElasticBeanstalk에 Node 관련을 배포할 때는,
      - name: Create env file
        run: |
          touch .env
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo SERVER_URL=${{ secrets.SERVER_URL }} >> .env
          echo PORT=${{ secrets.PORT  }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_DATABASE=${{ secrets.DB_DATABASE }} >> .env
          echo AUTH_SALT_ROUNDS=${{ secrets.AUTH_SALT_ROUNDS }} >> .env
          echo AUTH_REPEAT=${{ secrets.AUTH_REPEAT }} >> .env
          echo AUTH_LENGTH=${{ secrets.AUTH_LENGTH }} >> .env
          echo TIKTOK_CLIENT_KEY=${{ secrets.TIKTOK_CLIENT_KEY }} >> .env
          echo TIKTOK_CLIENT_SECRET=${{ secrets.TIKTOK_CLIENT_SECRET }} >> .env
          echo TIKTOK_OAUTH_REDIRECT_URI=${{ secrets.TIKTOK_OAUTH_REDIRECT_URI }} >> .env
          echo NEXT_CLIENT_URL=${{ secrets.NEXT_CLIENT_URL }} >> .env
          echo KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} >> .env
          echo KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }} >> .env
          echo JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }} >> .env
          echo JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }} >> .env
          cat .env
      # Initialize Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Install project dependencies and build
      - name: Install dependencies
        run: yarn install
      # 필자는 TS 파일들을 빌드해서 dist 폴더에 js 파일들을 만들기 때문에
      # 아래에서 zip 파일 구성 시 src 폴더를 제외한 것을 확인할 수 있다.
      - name: Run build
        run: yarn build
      #      - name: Start Server
      #        run: yarn start:prod
      # Install AWS CLI 2
      - name: Install AWS CLI 2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          which aws
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Make ZIP file with source code
      # -x는 zip파일 생성 시에 해당 부분들을 제외한다.
      - name: Generate deployment package
        #        run: zip -r deploy.zip . -x '*.git*' './src/*' './aws/*' awscliv2.zip
        run: zip -r deploy.zip . -x '*.git*' './src/*' './aws/*' './node_modules' './**/node_modules' awscliv2.zip

      # Get Current Time
      - name: Get Current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD-HH-mm-ss
          utcOffset: '+09:00'

      # Deploy to Elastic Beanstalk
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: mufin-server-development
          environment_name: Mufin-server-development-env
          region: ${{ secrets.AWS_REGION }}
          version_label: ${{github.SHA}}-${{ steps.current-time.outputs.formattedTime }}
          deployment_package: ./deploy.zip
          wait_for_environment_recovery: 300